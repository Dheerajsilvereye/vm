---
- import_tasks: ansible/tasks/backup/GIS_GIBOT.yml
  when: project == "backup/GIS_GIBOT.csv"
- import_tasks: ansible/tasks/backup/HES_MDMS_SPM.yml
  when: project == "backup/HES_MDMS_SPM.csv"
- import_tasks: ansible/tasks/backup/AMR.yml
  when: project == "backup/AMR.csv"
- import_tasks: ansible/tasks/backup/IT.yml
  when: project == "backup/IT.csv"

- import_tasks: web/web.yml
  when: env == "web"
- import_tasks: app/app.yml
  when: env == "App"
- import_tasks: db/db.yml
  when: env == "DB"
- name: date
  set_fact:
    os_disk: "{{ kvm_vm_hostname }}.{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}.qcow2"
- debug: var=os_disk
# tasks file for playbooks/roles/kvm-vm
- name: Check if operating system disk already exists
  stat:
    path: /var/lib/libvirt/images/{{ os_disk }}
    get_checksum: no
    get_md5: no
    get_mime: no
    get_attributes: no
  register: os_disk_file

- name: fail if operating system disk already exists
  fail:
    msg: "An operating system disk already exists at /var/lib/libvirt/images/{{ os_disk }}"
  when: os_disk_file.stat.exists

- name: Create operating system disk for vm
  command: "qemu-img create -f qcow2 /var/lib/libvirt/images/{{ os_disk }} {{ kvm_vm_os_disk_size }}"
  register: os_disk_results
  changed_when: '"Formatting" in os_disk_results.stdout'

- name: Push base image onto vm operating system disk
  command: >
    virt-resize --expand /dev/sda2 /var/lib/libvirt/images/{{ kvm_vm_base_img }}
    /var/lib/libvirt/images/{{ os_disk }}
  register: resize_os_disk_results
  changed_when: '"Resize operation completed with no errors" in resize_os_disk_results.stdout'
  
#- name: Download libguestfs appliance to work around RHEL 7 host/RHEL 8 guest XFS incompatibility
#  unarchive:
#    src:  http://download.libguestfs.org/binaries/appliance/appliance-1.40.1.tar.xz
#    dest: /tmp
#    creates: /tmp/appliance
#    remote_src: yes

  #- name: Grow root file system to size of disk
  #command: "virt-customize -a /var/lib/libvirt/images/{{ kvm_vm_os_disk_name }}.qcow2 --run-command 'xfs_growfs /'"
  #environment:
  #  LIBGUESTFS_PATH: /tmp/appliance
  #register: grow_os_disk_results
  #changed_when: '"Finishing off" in grow_os_disk_results.stdout'

- name: Set the root password for the vm and uninstall cloud-init
  command: > 
    virt-customize -a /var/lib/libvirt/images/{{ os_disk }}
    --root-password password:{{ kvm_vm_root_pwd }} --uninstall cloud-init
  environment:
    LIBGUESTFS_PATH: /tmp/appliance
  register: mod_os_disk_results
  changed_when: '"Finishing off" in mod_os_disk_results.stdout'
- name: create files dir
  shell: mkdir /files
  delegate_to: localhost
- name: change permission
  shell: chmod -R  777 /files
  delegate_to: localhost


- name: Create the ifcfg files for vm
  template:
    src: ifcfg.j2
    dest: /files/{{ kvm_vm_hostname }}-ifcfg-{{ item.name }}
  delegate_to: localhost
  loop: "{{ kvm_vm_nics }}"
- name: change permission
  shell: chmod -R 777 /files/{{ kvm_vm_hostname }}-ifcfg-{{ item.name }}
  loop: "{{ kvm_vm_nics }}"
  delegate_to: localhost

- name: Ensure individual dirs exist for vm ifcfg files
  file:
    path: "/tmp/{{ kvm_vm_hostname }}"
    state: directory

- name: Copy over the ifcfg files for the vm
  copy:
    src: /files/{{ kvm_vm_hostname }}-ifcfg-{{ item.name }}
    dest: "/tmp/{{ kvm_vm_hostname }}/ifcfg-{{ item.name }}"
  loop: "{{ kvm_vm_nics }}"

- name: Copy ifcfg files into vm operating disk
  command: >
    virt-copy-in -a /var/lib/libvirt/images/{{ os_disk }}
    /tmp/{{ kvm_vm_hostname }}/ifcfg-{{ item.name }} /etc/sysconfig/network-scripts/
  environment:
    LIBGUESTFS_PATH: /tmp/appliance
  loop: "{{ kvm_vm_nics }}"
  changed_when: false

- name: Create xml for vm
  command: >
    virt-install --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --os-variant rhel7
    --disk path=/var/lib/libvirt/images/{{ os_disk }},device=disk,bus=virtio
    --network none --noautoconsole --vnc --name {{ kvm_vm_hostname }} --cpu host-model --autostart --dry-run --print-xml
  register: vm_xml_content
  changed_when: false

- name: Define vm
  become: yes
  virt:
    name: "{{ kvm_vm_hostname }}"
    command: define
    xml: "{{ vm_xml_content.stdout }}"
    uri: qemu:///system

- name: Start up vm
  command: "virsh start {{ kvm_vm_hostname }}"
  register: virsh_start_results
  changed_when: '"started" in virsh_start_results.stdout'

- name: Attach network interfaces for vm
  command: "virsh attach-interface {{ kvm_vm_hostname }} {{ item.config }} --live --persistent"
  loop: "{{ kvm_vm_nics }}"
  changed_when: false
- import_tasks: additional_disk.yml
  when: addition_disk == "yes"
